name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

env:
  NODE_VERSION: '23'
  PNPM_VERSION: '10'

jobs:
  # Install dependencies and cache
  install:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-node-modules.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Check lockfile
        run: |
          echo "Checking pnpm lockfile..."
          if [ -f pnpm-lock.yaml ]; then
            echo "Lockfile exists"
            head -5 pnpm-lock.yaml
          else
            echo "No lockfile found"
          fi

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: bash .github/workflows/install-deps.sh

  # Lint all apps
  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        if: needs.install.outputs.cache-hit != 'true'
        run: bash .github/workflows/install-deps.sh

      - name: Run linting
        run: pnpm run lint

  # Build and test web app
  test-web:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        if: needs.install.outputs.cache-hit != 'true'
        run: bash .github/workflows/install-deps.sh

      - name: Build web app
        run: pnpm run build --filter=web

      - name: Cache web build
        uses: actions/cache@v4
        with:
          path: apps/web/.next
          key: ${{ runner.os }}-web-build-${{ github.sha }}

  # Build and test API
  test-api:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        if: needs.install.outputs.cache-hit != 'true'
        run: bash .github/workflows/install-deps.sh

      - name: Build API
        run: pnpm run build --filter=api

      - name: Run API tests
        run: pnpm run test --filter=api

      - name: Run API e2e tests
        run: pnpm run test:e2e --filter=api

      - name: Cache API build
        uses: actions/cache@v4
        with:
          path: apps/api/dist
          key: ${{ runner.os }}-api-build-${{ github.sha }}

  # Build mobile app
  test-mobile:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        if: needs.install.outputs.cache-hit != 'true'
        run: bash .github/workflows/install-deps.sh

      - name: Check mobile app TypeScript
        run: |
          cd apps/mobile
          pnpm run type-check

      - name: Export web version of mobile app
        run: |
          cd apps/mobile
          pnpm exec expo export:web

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        if: needs.install.outputs.cache-hit != 'true'
        run: bash .github/workflows/install-deps.sh

      - name: Run security audit
        run: pnpm audit --audit-level high

      - name: Run dependency check
        run: |
          echo "🔍 Running dependency vulnerability check..."
          pnpm audit --json > audit-report.json || true
          
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json